// Generated by gencpp from file quadruped_robot/multi_leg_control.msg
// DO NOT EDIT!


#ifndef QUADRUPED_ROBOT_MESSAGE_MULTI_LEG_CONTROL_H
#define QUADRUPED_ROBOT_MESSAGE_MULTI_LEG_CONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <quadruped_robot/leg_state.h>
#include <quadruped_robot/leg_state.h>
#include <quadruped_robot/leg_state.h>
#include <quadruped_robot/leg_state.h>

namespace quadruped_robot
{
template <class ContainerAllocator>
struct multi_leg_control_
{
  typedef multi_leg_control_<ContainerAllocator> Type;

  multi_leg_control_()
    : cm_s(0.0)
    , way(0)
    , walk_flag(false)
    , L1()
    , L2()
    , L3()
    , L4()  {
    }
  multi_leg_control_(const ContainerAllocator& _alloc)
    : cm_s(0.0)
    , way(0)
    , walk_flag(false)
    , L1(_alloc)
    , L2(_alloc)
    , L3(_alloc)
    , L4(_alloc)  {
  (void)_alloc;
    }



   typedef double _cm_s_type;
  _cm_s_type cm_s;

   typedef int64_t _way_type;
  _way_type way;

   typedef uint8_t _walk_flag_type;
  _walk_flag_type walk_flag;

   typedef  ::quadruped_robot::leg_state_<ContainerAllocator>  _L1_type;
  _L1_type L1;

   typedef  ::quadruped_robot::leg_state_<ContainerAllocator>  _L2_type;
  _L2_type L2;

   typedef  ::quadruped_robot::leg_state_<ContainerAllocator>  _L3_type;
  _L3_type L3;

   typedef  ::quadruped_robot::leg_state_<ContainerAllocator>  _L4_type;
  _L4_type L4;





  typedef boost::shared_ptr< ::quadruped_robot::multi_leg_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadruped_robot::multi_leg_control_<ContainerAllocator> const> ConstPtr;

}; // struct multi_leg_control_

typedef ::quadruped_robot::multi_leg_control_<std::allocator<void> > multi_leg_control;

typedef boost::shared_ptr< ::quadruped_robot::multi_leg_control > multi_leg_controlPtr;
typedef boost::shared_ptr< ::quadruped_robot::multi_leg_control const> multi_leg_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadruped_robot::multi_leg_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadruped_robot::multi_leg_control_<ContainerAllocator1> & lhs, const ::quadruped_robot::multi_leg_control_<ContainerAllocator2> & rhs)
{
  return lhs.cm_s == rhs.cm_s &&
    lhs.way == rhs.way &&
    lhs.walk_flag == rhs.walk_flag &&
    lhs.L1 == rhs.L1 &&
    lhs.L2 == rhs.L2 &&
    lhs.L3 == rhs.L3 &&
    lhs.L4 == rhs.L4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadruped_robot::multi_leg_control_<ContainerAllocator1> & lhs, const ::quadruped_robot::multi_leg_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadruped_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadruped_robot::multi_leg_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped_robot::multi_leg_control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped_robot::multi_leg_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2042bad48628ce2ee3747e89f60d7c02";
  }

  static const char* value(const ::quadruped_robot::multi_leg_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2042bad48628ce2eULL;
  static const uint64_t static_value2 = 0xe3747e89f60d7c02ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadruped_robot/multi_leg_control";
  }

  static const char* value(const ::quadruped_robot::multi_leg_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 cm_s\n"
"int64 way\n"
"bool walk_flag\n"
"leg_state L1\n"
"leg_state L2\n"
"leg_state L3\n"
"leg_state L4\n"
"================================================================================\n"
"MSG: quadruped_robot/leg_state\n"
"float64 t\n"
"float64 q0\n"
"float64 q1\n"
"string path\n"
"bool finish\n"
;
  }

  static const char* value(const ::quadruped_robot::multi_leg_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cm_s);
      stream.next(m.way);
      stream.next(m.walk_flag);
      stream.next(m.L1);
      stream.next(m.L2);
      stream.next(m.L3);
      stream.next(m.L4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct multi_leg_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadruped_robot::multi_leg_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadruped_robot::multi_leg_control_<ContainerAllocator>& v)
  {
    s << indent << "cm_s: ";
    Printer<double>::stream(s, indent + "  ", v.cm_s);
    s << indent << "way: ";
    Printer<int64_t>::stream(s, indent + "  ", v.way);
    s << indent << "walk_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walk_flag);
    s << indent << "L1: ";
    s << std::endl;
    Printer< ::quadruped_robot::leg_state_<ContainerAllocator> >::stream(s, indent + "  ", v.L1);
    s << indent << "L2: ";
    s << std::endl;
    Printer< ::quadruped_robot::leg_state_<ContainerAllocator> >::stream(s, indent + "  ", v.L2);
    s << indent << "L3: ";
    s << std::endl;
    Printer< ::quadruped_robot::leg_state_<ContainerAllocator> >::stream(s, indent + "  ", v.L3);
    s << indent << "L4: ";
    s << std::endl;
    Printer< ::quadruped_robot::leg_state_<ContainerAllocator> >::stream(s, indent + "  ", v.L4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADRUPED_ROBOT_MESSAGE_MULTI_LEG_CONTROL_H
