// Generated by gencpp from file quadruped_robot/write_dxlRequest.msg
// DO NOT EDIT!


#ifndef QUADRUPED_ROBOT_MESSAGE_WRITE_DXLREQUEST_H
#define QUADRUPED_ROBOT_MESSAGE_WRITE_DXLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadruped_robot
{
template <class ContainerAllocator>
struct write_dxlRequest_
{
  typedef write_dxlRequest_<ContainerAllocator> Type;

  write_dxlRequest_()
    : action()
    , protocol_version(0)
    , motor_f(0)
    , motor_p(0)
    , data_f(0.0)
    , data_p(0.0)  {
    }
  write_dxlRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , protocol_version(0)
    , motor_f(0)
    , motor_p(0)
    , data_f(0.0)
    , data_p(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef int64_t _protocol_version_type;
  _protocol_version_type protocol_version;

   typedef int64_t _motor_f_type;
  _motor_f_type motor_f;

   typedef int64_t _motor_p_type;
  _motor_p_type motor_p;

   typedef double _data_f_type;
  _data_f_type data_f;

   typedef double _data_p_type;
  _data_p_type data_p;





  typedef boost::shared_ptr< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct write_dxlRequest_

typedef ::quadruped_robot::write_dxlRequest_<std::allocator<void> > write_dxlRequest;

typedef boost::shared_ptr< ::quadruped_robot::write_dxlRequest > write_dxlRequestPtr;
typedef boost::shared_ptr< ::quadruped_robot::write_dxlRequest const> write_dxlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadruped_robot::write_dxlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadruped_robot::write_dxlRequest_<ContainerAllocator1> & lhs, const ::quadruped_robot::write_dxlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.protocol_version == rhs.protocol_version &&
    lhs.motor_f == rhs.motor_f &&
    lhs.motor_p == rhs.motor_p &&
    lhs.data_f == rhs.data_f &&
    lhs.data_p == rhs.data_p;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadruped_robot::write_dxlRequest_<ContainerAllocator1> & lhs, const ::quadruped_robot::write_dxlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadruped_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c6311a9699b2c19362d1faa0a70fcd4";
  }

  static const char* value(const ::quadruped_robot::write_dxlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c6311a9699b2c19ULL;
  static const uint64_t static_value2 = 0x362d1faa0a70fcd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadruped_robot/write_dxlRequest";
  }

  static const char* value(const ::quadruped_robot::write_dxlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"int64 protocol_version\n"
"int64 motor_f\n"
"int64 motor_p\n"
"float64 data_f\n"
"float64 data_p\n"
;
  }

  static const char* value(const ::quadruped_robot::write_dxlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.protocol_version);
      stream.next(m.motor_f);
      stream.next(m.motor_p);
      stream.next(m.data_f);
      stream.next(m.data_p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct write_dxlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadruped_robot::write_dxlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadruped_robot::write_dxlRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "protocol_version: ";
    Printer<int64_t>::stream(s, indent + "  ", v.protocol_version);
    s << indent << "motor_f: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motor_f);
    s << indent << "motor_p: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motor_p);
    s << indent << "data_f: ";
    Printer<double>::stream(s, indent + "  ", v.data_f);
    s << indent << "data_p: ";
    Printer<double>::stream(s, indent + "  ", v.data_p);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADRUPED_ROBOT_MESSAGE_WRITE_DXLREQUEST_H
