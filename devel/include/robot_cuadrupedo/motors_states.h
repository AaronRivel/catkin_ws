// Generated by gencpp from file robot_cuadrupedo/motors_states.msg
// DO NOT EDIT!


#ifndef ROBOT_CUADRUPEDO_MESSAGE_MOTORS_STATES_H
#define ROBOT_CUADRUPEDO_MESSAGE_MOTORS_STATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_cuadrupedo_msgs/legs_control.h>
#include <robot_cuadrupedo_msgs/legs_control.h>
#include <robot_cuadrupedo_msgs/legs_control.h>
#include <robot_cuadrupedo_msgs/legs_control.h>

namespace robot_cuadrupedo
{
template <class ContainerAllocator>
struct motors_states_
{
  typedef motors_states_<ContainerAllocator> Type;

  motors_states_()
    : leg1()
    , leg2()
    , leg3()
    , leg4()  {
    }
  motors_states_(const ContainerAllocator& _alloc)
    : leg1(_alloc)
    , leg2(_alloc)
    , leg3(_alloc)
    , leg4(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator>  _leg1_type;
  _leg1_type leg1;

   typedef  ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator>  _leg2_type;
  _leg2_type leg2;

   typedef  ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator>  _leg3_type;
  _leg3_type leg3;

   typedef  ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator>  _leg4_type;
  _leg4_type leg4;





  typedef boost::shared_ptr< ::robot_cuadrupedo::motors_states_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_cuadrupedo::motors_states_<ContainerAllocator> const> ConstPtr;

}; // struct motors_states_

typedef ::robot_cuadrupedo::motors_states_<std::allocator<void> > motors_states;

typedef boost::shared_ptr< ::robot_cuadrupedo::motors_states > motors_statesPtr;
typedef boost::shared_ptr< ::robot_cuadrupedo::motors_states const> motors_statesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_cuadrupedo::motors_states_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_cuadrupedo::motors_states_<ContainerAllocator1> & lhs, const ::robot_cuadrupedo::motors_states_<ContainerAllocator2> & rhs)
{
  return lhs.leg1 == rhs.leg1 &&
    lhs.leg2 == rhs.leg2 &&
    lhs.leg3 == rhs.leg3 &&
    lhs.leg4 == rhs.leg4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_cuadrupedo::motors_states_<ContainerAllocator1> & lhs, const ::robot_cuadrupedo::motors_states_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_cuadrupedo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_cuadrupedo::motors_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_cuadrupedo::motors_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_cuadrupedo::motors_states_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6779dc7494c3c55386a9358df1a0c6a";
  }

  static const char* value(const ::robot_cuadrupedo::motors_states_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6779dc7494c3c55ULL;
  static const uint64_t static_value2 = 0x386a9358df1a0c6aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_cuadrupedo/motors_states";
  }

  static const char* value(const ::robot_cuadrupedo::motors_states_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_cuadrupedo_msgs/legs_control leg1\n"
"\n"
"robot_cuadrupedo_msgs/legs_control leg2\n"
"\n"
"robot_cuadrupedo_msgs/legs_control leg3\n"
"\n"
"robot_cuadrupedo_msgs/legs_control leg4\n"
"================================================================================\n"
"MSG: robot_cuadrupedo_msgs/legs_control\n"
"float64 frontal_motor\n"
"float64 posterior_motor\n"
"bool walk\n"
"bool goal_position_feedback\n"
;
  }

  static const char* value(const ::robot_cuadrupedo::motors_states_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leg1);
      stream.next(m.leg2);
      stream.next(m.leg3);
      stream.next(m.leg4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motors_states_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_cuadrupedo::motors_states_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_cuadrupedo::motors_states_<ContainerAllocator>& v)
  {
    s << indent << "leg1: ";
    s << std::endl;
    Printer< ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator> >::stream(s, indent + "  ", v.leg1);
    s << indent << "leg2: ";
    s << std::endl;
    Printer< ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator> >::stream(s, indent + "  ", v.leg2);
    s << indent << "leg3: ";
    s << std::endl;
    Printer< ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator> >::stream(s, indent + "  ", v.leg3);
    s << indent << "leg4: ";
    s << std::endl;
    Printer< ::robot_cuadrupedo_msgs::legs_control_<ContainerAllocator> >::stream(s, indent + "  ", v.leg4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CUADRUPEDO_MESSAGE_MOTORS_STATES_H
