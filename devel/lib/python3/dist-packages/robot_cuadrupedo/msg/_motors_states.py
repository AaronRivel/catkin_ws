# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_cuadrupedo/motors_states.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_cuadrupedo_msgs.msg

class motors_states(genpy.Message):
  _md5sum = "c6779dc7494c3c55386a9358df1a0c6a"
  _type = "robot_cuadrupedo/motors_states"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """robot_cuadrupedo_msgs/legs_control leg1

robot_cuadrupedo_msgs/legs_control leg2

robot_cuadrupedo_msgs/legs_control leg3

robot_cuadrupedo_msgs/legs_control leg4
================================================================================
MSG: robot_cuadrupedo_msgs/legs_control
float64 frontal_motor
float64 posterior_motor
bool walk
bool goal_position_feedback"""
  __slots__ = ['leg1','leg2','leg3','leg4']
  _slot_types = ['robot_cuadrupedo_msgs/legs_control','robot_cuadrupedo_msgs/legs_control','robot_cuadrupedo_msgs/legs_control','robot_cuadrupedo_msgs/legs_control']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leg1,leg2,leg3,leg4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motors_states, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.leg1 is None:
        self.leg1 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg2 is None:
        self.leg2 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg3 is None:
        self.leg3 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg4 is None:
        self.leg4 = robot_cuadrupedo_msgs.msg.legs_control()
    else:
      self.leg1 = robot_cuadrupedo_msgs.msg.legs_control()
      self.leg2 = robot_cuadrupedo_msgs.msg.legs_control()
      self.leg3 = robot_cuadrupedo_msgs.msg.legs_control()
      self.leg4 = robot_cuadrupedo_msgs.msg.legs_control()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d2B2d2B2d2B2d2B().pack(_x.leg1.frontal_motor, _x.leg1.posterior_motor, _x.leg1.walk, _x.leg1.goal_position_feedback, _x.leg2.frontal_motor, _x.leg2.posterior_motor, _x.leg2.walk, _x.leg2.goal_position_feedback, _x.leg3.frontal_motor, _x.leg3.posterior_motor, _x.leg3.walk, _x.leg3.goal_position_feedback, _x.leg4.frontal_motor, _x.leg4.posterior_motor, _x.leg4.walk, _x.leg4.goal_position_feedback))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.leg1 is None:
        self.leg1 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg2 is None:
        self.leg2 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg3 is None:
        self.leg3 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg4 is None:
        self.leg4 = robot_cuadrupedo_msgs.msg.legs_control()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.leg1.frontal_motor, _x.leg1.posterior_motor, _x.leg1.walk, _x.leg1.goal_position_feedback, _x.leg2.frontal_motor, _x.leg2.posterior_motor, _x.leg2.walk, _x.leg2.goal_position_feedback, _x.leg3.frontal_motor, _x.leg3.posterior_motor, _x.leg3.walk, _x.leg3.goal_position_feedback, _x.leg4.frontal_motor, _x.leg4.posterior_motor, _x.leg4.walk, _x.leg4.goal_position_feedback,) = _get_struct_2d2B2d2B2d2B2d2B().unpack(str[start:end])
      self.leg1.walk = bool(self.leg1.walk)
      self.leg1.goal_position_feedback = bool(self.leg1.goal_position_feedback)
      self.leg2.walk = bool(self.leg2.walk)
      self.leg2.goal_position_feedback = bool(self.leg2.goal_position_feedback)
      self.leg3.walk = bool(self.leg3.walk)
      self.leg3.goal_position_feedback = bool(self.leg3.goal_position_feedback)
      self.leg4.walk = bool(self.leg4.walk)
      self.leg4.goal_position_feedback = bool(self.leg4.goal_position_feedback)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d2B2d2B2d2B2d2B().pack(_x.leg1.frontal_motor, _x.leg1.posterior_motor, _x.leg1.walk, _x.leg1.goal_position_feedback, _x.leg2.frontal_motor, _x.leg2.posterior_motor, _x.leg2.walk, _x.leg2.goal_position_feedback, _x.leg3.frontal_motor, _x.leg3.posterior_motor, _x.leg3.walk, _x.leg3.goal_position_feedback, _x.leg4.frontal_motor, _x.leg4.posterior_motor, _x.leg4.walk, _x.leg4.goal_position_feedback))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.leg1 is None:
        self.leg1 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg2 is None:
        self.leg2 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg3 is None:
        self.leg3 = robot_cuadrupedo_msgs.msg.legs_control()
      if self.leg4 is None:
        self.leg4 = robot_cuadrupedo_msgs.msg.legs_control()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.leg1.frontal_motor, _x.leg1.posterior_motor, _x.leg1.walk, _x.leg1.goal_position_feedback, _x.leg2.frontal_motor, _x.leg2.posterior_motor, _x.leg2.walk, _x.leg2.goal_position_feedback, _x.leg3.frontal_motor, _x.leg3.posterior_motor, _x.leg3.walk, _x.leg3.goal_position_feedback, _x.leg4.frontal_motor, _x.leg4.posterior_motor, _x.leg4.walk, _x.leg4.goal_position_feedback,) = _get_struct_2d2B2d2B2d2B2d2B().unpack(str[start:end])
      self.leg1.walk = bool(self.leg1.walk)
      self.leg1.goal_position_feedback = bool(self.leg1.goal_position_feedback)
      self.leg2.walk = bool(self.leg2.walk)
      self.leg2.goal_position_feedback = bool(self.leg2.goal_position_feedback)
      self.leg3.walk = bool(self.leg3.walk)
      self.leg3.goal_position_feedback = bool(self.leg3.goal_position_feedback)
      self.leg4.walk = bool(self.leg4.walk)
      self.leg4.goal_position_feedback = bool(self.leg4.goal_position_feedback)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d2B2d2B2d2B2d2B = None
def _get_struct_2d2B2d2B2d2B2d2B():
    global _struct_2d2B2d2B2d2B2d2B
    if _struct_2d2B2d2B2d2B2d2B is None:
        _struct_2d2B2d2B2d2B2d2B = struct.Struct("<2d2B2d2B2d2B2d2B")
    return _struct_2d2B2d2B2d2B2d2B
